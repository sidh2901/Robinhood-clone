[{"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\index.js":"1","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\App.js":"2","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\reportWebVitals.js":"3","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Header.js":"4","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Newsfeed.js":"5","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Stats.js":"6","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\LineGraph.js":"7","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\StatsRow.js":"8","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Firebase.js":"9","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\TImeLine.js":"10","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Chip.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":487,"mtime":1610656331874,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":850,"mtime":1610647791649,"results":"16","hashOfConfig":"13"},{"size":2026,"mtime":1611442805665,"results":"17","hashOfConfig":"13"},{"size":3389,"mtime":1611371012913,"results":"18","hashOfConfig":"13"},{"size":2631,"mtime":1611435249348,"results":"19","hashOfConfig":"13"},{"size":1446,"mtime":1611442375639,"results":"20","hashOfConfig":"13"},{"size":515,"mtime":1611367182030,"results":"21","hashOfConfig":"13"},{"size":721,"mtime":1611375632373,"results":"22","hashOfConfig":"13"},{"size":418,"mtime":1611437612762,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"d1z91w",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\index.js",[],["53","54"],"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\App.js",["55"],"import logo from './logo.svg';\nimport './App.css';\nimport Header from './Header'\nimport Newsfeed from './Newsfeed'\nimport Stats from './Stats'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Header*/}\n      <div className=\"app__header\">\n        <Header />\n\n      </div>\n\n      <div className=\"app__body\">\n        <div className=\"app__container\">\n           <Newsfeed />\n           \n           <Stats />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\reportWebVitals.js",[],"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Header.js",["56","57","58","59","60","61"],"import React from 'react'\r\nimport Logo from './robinhood.svg'\r\nimport './Header.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header__wrapper\">\r\n            \r\n            <div className=\"header__logo\">\r\n               <img src={Logo} width={25} />\r\n            </div>\r\n\r\n            <div className=\"header__search\">\r\n                <div className=\"header__searchContainer\">\r\n                    <input placeholder=\"Search\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"header__menuItems\">\r\n                <a href=\"#\">Free Stocks</a>\r\n                <a href=\"#\">Portfolio</a>\r\n                <a href=\"#\">Cash</a>\r\n                <a href=\"#\">Messages</a>\r\n                <a href=\"#\">Account</a>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Newsfeed.js",[],"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Stats.js",["62","63","64"],"import React, {useState, useEffect} from 'react'\r\nimport './Stats.css'\r\nimport axios from \"axios\";\r\nimport StatsRow from './StatsRow'\r\nimport { db } from \"./Firebase\"\r\n\r\nconst TOKEN=\"c05mfvv48v6uiu31aoo0\";\r\nconst BASE_URL=\"https://finnhub.io/api/v1/quote\";\r\n\r\n\r\nfunction Stats() {\r\n\r\n    const [stocksData, setStocksData] = useState([]);\r\n    const [myStocks, setmyStocks] = useState([]);\r\n    const getMyStocks = () => {\r\n        db\r\n        .collection('myStocks')\r\n        .onSnapshot(snapshot => {\r\n            console.log(snapshot.docs);\r\n            let promises = [];\r\n            let tempData = [];\r\n            snapshot.docs.map((doc)=> {\r\n                promises.push(getStocksData(doc.data().ticker)\r\n                .then(res => {\r\n                    tempData.push({\r\n                        id: doc.id,\r\n                        data: doc.data(),\r\n                        info: res.data\r\n                    })\r\n                })\r\n            )})\r\n           Promise.all(promises).then(()=>{\r\n               setmyStocks(tempData);\r\n           })\r\n\r\n\r\n        })\r\n    }\r\n\r\n    const getStocksData = (stock)=> {\r\n        return axios\r\n         .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\r\n         .catch((error)=>{\r\n             console.error(\"Error\",error.message);\r\n         });\r\n\r\n    }; \r\n\r\n    useEffect(()=>{\r\n        let tempStocksData =[]\r\n        const stocksList = [\"AAPL\", \"MSFT\", \"TSLA\", \"FB\", \"BABA\", \"UBER\", \"DIS\", \"SBUX\"];\r\n        let promises = [];\r\n        getMyStocks ();\r\n        stocksList.map((stock) => {\r\n        promises.push(\r\n            getStocksData(stock)\r\n            .then((res) => {\r\n            tempStocksData.push({\r\n                name: stock,\r\n                ...res.data\r\n            });\r\n            })\r\n        )\r\n    });\r\n\r\n    Promise.all(promises).then(()=>{\r\n      setStocksData(tempStocksData);\r\n      console.log(tempStocksData)\r\n    })\r\n    },[]);\r\n\r\n    return (\r\n        <div className=\"stats\">\r\n            <div className=\"stats__container\">\r\n                <div className=\"stats__header\">\r\n                    <p>Stocks</p>\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {myStocks.map((stock) => (\r\n                        <StatsRow\r\n                            key={stock.data.ticker}\r\n                            name={stock.data.ticker}\r\n                            openPrice={stock.info.o}\r\n                            shares={stock.data.shares}\r\n                            price={stock.info.c}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"stats__header stats__lists\">\r\n                    <p>Lists</p>\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {stocksData.map((stock) => (\r\n                            <StatsRow\r\n                                key={stock.name}\r\n                                name={stock.name}\r\n                                openPrice={stock.o}\r\n                                price={stock.c}\r\n                            />\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats\r\n","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\LineGraph.js",["65"],"import React, {useEffect,useState} from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport './LineGraph.css'\r\n\r\nfunction LineGraph() {\r\n    const [graphData, setGraphData]= useState([]);\r\n    const data = \r\n    [{\r\n        x: 10,\r\n        y:20\r\n    }, {\r\n        x: 15,\r\n        y: 10\r\n    }, {\r\n        x: 12,\r\n        y: 4\r\n    }]\r\n\r\n    const createMockData =() => {\r\n        let data = [];\r\n        let value =50;\r\n        for(var i=0; i < 366; i++){\r\n            let date = new Date();\r\n            date.setHours(0,0,0,0);\r\n            date.setDate(i);\r\n            value += Math.round((Math.random ()< 0.5 ? 1 :0)* Math.random()*10);\r\n            data.push({x: date, y:value});\r\n        }\r\n        setGraphData(data);\r\n    }\r\n\r\n    useEffect(()=>{\r\n         createMockData();\r\n    }, [])\r\n    return (\r\n        <div className='linegraph'>\r\n            <Line\r\n              data={{\r\n                  datasets: [\r\n                       {\r\n                           type: \"line\",\r\n                           data: graphData,\r\n                           backgroundColor: \"black\",\r\n                           borderColor: \"#5AC53B\",\r\n                           borderWidth: 2,\r\n                           pointBorderColor: 'rgba(0, 0, 0, 0)',\r\n                           pointBackgroundColor: 'rgba(0, 0, 0, 0)',\r\n                           pointHoverBackgroundColor: '#5AC53B',\r\n                           pointHoverBorderColor: '#000000',\r\n                           pointHoverBorderWidth: 4,\r\n                           pointHoverRadius: 6,\r\n                       }\r\n                  ]\r\n              }}\r\n\r\n              options={{\r\n                  legend: {\r\n                     display: false\r\n                  },\r\n                  tooltips: {\r\n                      mode: \"index\",\r\n                      intersect: false\r\n                  },\r\n                scales: {\r\n                    xAxes:[\r\n                        {\r\n                            type: \"time\",\r\n                            time:{\r\n                                format:\"MM/DD/YY\",\r\n                                tooltipFormat:\"ll\",\r\n                            },\r\n                            ticks:{\r\n                                display: false,\r\n                            }\r\n                        },\r\n                    ],\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            display: false\r\n                        }\r\n                    }]\r\n                }\r\n              }}\r\n              \r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\StatsRow.js",["66"],"import React from 'react'\r\nimport './StatsRow.css'\r\nimport StockSVG from './stock.svg'\r\nimport { db } from './Firebase';\r\n\r\nfunction StatsRow(props) {\r\n\r\n    const percentage = ((props.price - props.openPrice)/props.openPrice)*100;  \r\n    \r\n    const buyStock = () => {\r\n          db.collection('myStocks')\r\n          .where(\"ticker\", \"==\", props.name)\r\n          .get()\r\n          .then((querySnapshot)=>{\r\n            if(!querySnapshot.empty){\r\n\r\n            querySnapshot.forEach(function(doc){\r\n              db.collection('myStocks')\r\n              .doc(doc.id)\r\n              .update({\r\n                shares: doc.data().shares+=1\r\n              })\r\n            });\r\n          } else {\r\n            db.collection('myStocks')\r\n            .add({\r\n              ticker: props.name,\r\n              shares: 1\r\n            })\r\n          }\r\n          } )\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" onClick={buyStock} >\r\n        <div className=\"row__intro\">\r\n          <h1>{props.name}</h1>\r\n          <p>{props.shares &&\r\n           (props.shares + \"shares\")\r\n          }</p>\r\n        </div>\r\n        <div className=\"row__chart\">\r\n          <img src={StockSVG} height={16}/>\r\n        </div>\r\n        <div className=\"row__numbers\">\r\n          <p className=\"row__price\">{props.price}</p>\r\n          <p className=\"row__percentage\"> {Number(percentage).toFixed(2)}% </p>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default StatsRow\r\n","C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Firebase.js",[],"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\TImeLine.js",[],"C:\\Users\\sidh2\\Desktop\\Clone-Robinhood\\robinhood-clone\\robinhood\\src\\Chip.js",["67"],"import React from 'react'\r\nimport './Chip.css'\r\n\r\nfunction Chip(props) {\r\n    return (\r\n        <div className=\"chip\">\r\n            <div className=\"chip__avatar\">\r\n               <img src ={props.image} width={10} height={10} />\r\n            </div>\r\n            <div className=\"chip__label\">\r\n              <span>{props.label}</span>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chip\r\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},{"ruleId":"76","severity":1,"message":"77","line":10,"column":16,"nodeType":"78","endLine":10,"endColumn":45},{"ruleId":"79","severity":1,"message":"80","line":20,"column":17,"nodeType":"78","endLine":20,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":21,"column":17,"nodeType":"78","endLine":21,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":22,"column":17,"nodeType":"78","endLine":22,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":23,"column":17,"nodeType":"78","endLine":23,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":24,"column":17,"nodeType":"78","endLine":24,"endColumn":29},{"ruleId":"81","severity":1,"message":"82","line":22,"column":36,"nodeType":"83","messageId":"84","endLine":22,"endColumn":38},{"ruleId":"81","severity":1,"message":"82","line":54,"column":32,"nodeType":"83","messageId":"84","endLine":54,"endColumn":34},{"ruleId":"85","severity":1,"message":"86","line":70,"column":7,"nodeType":"87","endLine":70,"endColumn":9,"suggestions":"88"},{"ruleId":"72","severity":1,"message":"89","line":7,"column":11,"nodeType":"74","messageId":"75","endLine":7,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":43,"column":11,"nodeType":"78","endLine":43,"endColumn":44},{"ruleId":"76","severity":1,"message":"77","line":8,"column":16,"nodeType":"78","endLine":8,"endColumn":65},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [getMyStocks]",{"range":"95","text":"96"},[1912,1914],"[getMyStocks]"]